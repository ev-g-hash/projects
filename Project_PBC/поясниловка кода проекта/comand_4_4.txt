_______________________________________________________________________________________________________
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

разделение по разделам кухня, спальня и т.д.
_________________________________________________

заходим в base.html

                        {% tag_categories as categories  %}
                        {% for category in categories %}
                            <li><a class="dropdown-item text-white" href="{% url "catalog:index" category.slug %}">{{ category.name }}</a></li>
                        {% endfor %}

                        дописываем category.slug

переходим в файл goods/urls.py
______________________________
from django.urls import path

from goods import views

app_name = "goods"

urlpatterns = [
    path('<slug:category_slug>/', views.catalog, name='index'),
    path('product/<slug:product_slug>/', views.product, name='product'),
]

дописываем <slug:category_slug>/

переходим в goods/views.py
______________________________

def catalog(request, category_slug):
    if category_slug == 'oll':
        goods = Products.objects.all()
    else:
        goods = Products.objects.filter(category__slug=category_slug)

    context = {
        "title": "Home - каталог",
        "goods": goods,           
    }
    return render(request, "goods/catalog.html", context)


Дописываем , category_slug в функцию и условие if для всех товаров и иначе по фильтру
обрати внимание там где 
------------
    else:
        goods = Products.objects.filter(category__slug=category_slug)
-------------
category__slug который первый два подчеркивания

последний код если на странице нет пока товаров -get_list_or_404- специальная функция
_________________________________________________________________
from django.shortcuts import get_list_or_404, render
from django.template import context

from goods.models import Products


def catalog(request, category_slug):
    if category_slug == 'oll':
        goods = Products.objects.all()
    else:
        goods = get_list_or_404(Products.objects.filter(category__slug=category_slug))

заходим проверяем
_________________________________________________________________

пагинация
goods/views и шаблон catalog.py
____________________________________________________________________views
from django.core.paginator import Paginator     ----------------------- *********
from django.shortcuts import get_list_or_404, render
from django.template import context

from goods.models import Products


def catalog(request, category_slug):
    if category_slug == 'oll':
        goods = Products.objects.all()
    else:
        goods = get_list_or_404(Products.objects.filter(category__slug=category_slug))

    paginator = Paginator(goods, 3)          --------------------**************                   
    current_page = paginator.page(1)        --------------------************** 

    context = {
        "title": "Home - каталог",
        "goods": current_page,              --------------------**************     
    }


открываем goods/models.py

    class Meta:
        db_table = 'category'
        verbose_name = 'Категорию'
        verbose_name_plural = 'Категории'
        ordering = ("id",)                      --------------------************** 


пишем код -------------------------
views
from django.core.paginator import Paginator
from django.shortcuts import get_list_or_404, render       ----------------------****************list
from django.template import context

from goods.models import Products


def catalog(request, category_slug, page=1):            ----------------------****************
    if category_slug == 'oll':
        goods = Products.objects.all()
    else:
        goods = get_list_or_404(Products.objects.filter(category__slug=category_slug))

    paginator = Paginator(goods, 3)
    current_page = paginator.page(page)                 ----------------------****************

    context = {
        "title": "Home - каталог",
        "goods": current_page, 
        "slug_url": category_slug,           ----------------------****************
    } 
    return render(request, "goods/catalog.html", context)

_________________________________________________
urls
from django.urls import path

from goods import views

app_name = "goods"

urlpatterns = [
    path('<slug:category_slug>/', views.catalog, name='index'),
    path('<slug:category_slug>/<int:page>/', views.catalog, name='index'), ----------------------****************
    path('product/<slug:product_slug>/', views.product, name='product'),
]

______________________________
catalog

                                  <a class="page-link">Previous</a>
                                </li>
--------------*******************
                                {% for page in goods.paginator.page_range %}
                                    <li class="page-item"><a class="page-link" href="{% url "catalog:index" slug_url page %}">{{ page }}</a></li>
                                {% endfor %}
         --------------*******************                       
                                <li class="page-item">
                                  <a class="page-link" href="#">Next</a>

проверяем всё работает
______________________________
далее в catalog кнопка назад

    <!-- Пагинация -->
    <nav aria-label="Page navigation example">
                        <ul class="pagination justify-content-center my-4">
                            <div class="custom-shadow d-flex">
                -----------------*****************
                                <li class="page-item {% if not goods.has_previous %}disabled{% endif %}">
                                  <a class="page-link" href="{% if goods.has_previous %}
                                  {% url "catalog:index" slug_url goods.previous_page_number %}
                                  {% else %}
                                  #
                                  {% endif %}">Назад</a>
                                </li>
                        ------------***************
проверяем всё работает
______________________________
кнопка вперед

удаляем разметку
                                <li class="page-item">
                                  <a class="page-link" href="#">Next</a>
                                </li>
вставляем код 
                                <li class="page-item {% if not goods.has_next %}disabled{% endif %}">
                                  <a class="page-link" href="{% if goods.has_next %}
                                  {% url "catalog:index" slug_url goods.next_page_number %}
                                  {% else %}
                                  #
                                  {% endif %}">Вперёд</a>
                                </li>


___________________________
в catalog в цикле for прописываем условие чтобы кнопка на которой находимся была неактивной
но была выделена что бы было понятно что мы на ней находимся

вот этот цикл 
                                {% for page in goods.paginator.page_range %}
                                    <li class="page-item"><a class="page-link" href="{% url "catalog:index" slug_url page %}">{{ page }}</a></li>
                                {% endfor %}

вот подправленный код
                                {% for page in goods.paginator.page_range %}

                                    <li class="page-item {% if goods.number == page %} active {% endif %}">
                                        <a class="page-link" href="{% url "catalog:index" slug_url page %}">{{ page }}</a>
                                    </li>

                                {% endfor %}

________________________________
далее выберем диапазон чтобы было видно например первые три кнопки, так как кнопок может быть много
и отображать все нет смысла прописываем if
готовый код

                                {% for page in goods.paginator.page_range %}
                                {% if page >= goods.number|add:-2 and page <= goods.number|add:2 %}

                                    <li class="page-item {% if goods.number == page %} active {% endif %}">
                                        <a class="page-link" href="{% url "catalog:index" slug_url page %}">{{ page }}</a>
                                    </li>

                                {% endif %}
                                {% endfor %}

                    
находим 
<p class="card-text">{{ product.description| }}</p> 
в catalog

и вносим изменения text-truncate - это bootstrap настойки class

<p class="card-text">{{ product.description|truncatechars:45 }}</p> 
_________________________________________________
_______________________________________________________________________________________________________
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&