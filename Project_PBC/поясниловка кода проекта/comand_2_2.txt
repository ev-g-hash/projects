_______________________________________
создание приложения с каталогом товаров

Открываем терминал 
- python manage.py startapp goods               -- товары

регистрируем его в setting
ниже main,
пишем
goods,

_____________________________
открываем views который в goods вносим данные

from django.shortcuts import render

def catalog(request):
    return render()

def product(request):
    return render()

подключаем на соответствующие URL адреса для этого в папке goods создаём файл urls.py
копируем ту же коллекцию что уже есть в main и меняем для goods
----------------------------------------------------------
from django.urls import path

from goods import views

app_name = "goods"

urlpatterns = [
    path('', views.catalog, name='index'),
    path('product/', views.product, name='product'),
]
----------------------------------------------------------

для urls.py app вносим дополнения

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('main.urls', namespace='main')),
    path('catalog/', include('goods.urls', namespace='catalog'))
]
_______________________________________
в goods создаём папку templates
в ней создаём папку goods
далее создаём два файла catalog.py и product.py

дале необходимо их расширить от базового base.py

открываем файлы catalog.py и product.py
подгружаем базовый шаблон и статику

{% extends "main/base.html" %}
{% load static %}

далее расширяем файлы
catalog.py
{% extends "main/base.html" %}
{% load static %}

{% block content %}
    <!-- Контент на странице -->
    <div class="row">...
    </div>

    <!-- Пагинация -->
    <nav aria-label="Page navigation example">...
    </nav>
{% endblock  %}

{% block footer %}
    <footer class="py-4 bg-dark">
        <div class="container">
            <p class="m-0 text-center text-white">Copyright &copy; Home Python Hub Studio 2023</p>
        </div>
    </footer>
{% endblock %}

___________________________________________
далее прописываем представление views.py

from django.shortcuts import render

def catalog(request):
    return render(request, 'goods/catalog.html')

def product(request):
    return render(request, 'goods/product.html')

запускаем сервер проверяем                          +работает

_____________________________________________
прописываем ссылку на каталог

заходим main/templates/base.html прописываем путь к товарам пока на общую страницу goods
                    <ul class="dropdown-menu bg-dark" data-bs-theme="dark">
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Все товары</a></li>
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Кухня</a></li>
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Спальня</a></li>
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Гостинная</a></li>
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Офис</a></li>
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Фурнитура</a></li>
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Декор</a></li>
                    </ul>

_______________________-------------------------проверяем всё работает

открываем views который в goods и вносим изменения

from django.shortcuts import render

def catalog(request):
    context = {
        "title": "Home - каталог",
        "goods": [
        {'image': 'deps/images/goods/set of tea table and three chairs.jpg',
         'name': 'Чайный столик и три стула',
         'description': 'Комплект из трёх стульев и дизайнерский столик для гостинной комнаты.',
         'price': 150.00},
] и т.д. из файла goods_list.py

}
return render(request, "goods/catalog.html", context)
__________________________________________________
открываем catalog.py удаляем карты товаров кроме одной

                        <!-- Карта товара -->
                        <div class="col-lg-4 col-md-6 p-4">
                        </div>
делаем цикл
    {% for product in goods %}
        <!-- Карта товара -->
        <div class="col-lg-4 col-md-6 p-4">
            <div class="card border-primary rounded custom-shadow">
                <img src="../deps/images/goods/set of tea table and three chairs.jpg" class="card-img-top" alt="...">
                <div class="card-body">
                    <a href="../goods/product.html">

                        <p class="card-title">{{ product.name }}</p>

                    </a>

                    <p class="card-text text-truncate">{{ product.description }}</p>

                    <p class="product_id">id: 02265</p>
                    <div class="d-flex justify-content-between">

                        {% comment %}                         
                        <p><s>100</s> $</p>
                        <p><strong>90.00 $</strong></p>
                        <span class="badge bg-warning text-dark">Скидка 10.00 %</span> 
                        {% endcomment %}

                        <p><strong>{{ product.price }} $</strong></p>

                        <a href="#" class="btn add-to-cart">
                            <img class="mx-1" src="../deps/icons/cart-plus.svg" alt="Catalog Icon"
                                width="32" height="32">
                        </a>
                    </div>
                </div>
            </div>
        </div>
    
    {% endfor %}   
 то есть ссылаемся на views и пробегаемся циклом по goods и выводим все товары

 проверяем + всё работает


 ______________________________________________________
подгружаем иконку корзинка через статик в файле catalog.py

<a href="#" class="btn add-to-cart">
    <img class="mx-1" src={% static "/deps/icons/cart-plus.svg" %} alt="Catalog Icon"
        width="32" height="32">
    </a>

______________________________________________________
далее прорисовываем картинки товара, для этого в цикле обращаемся product.image
в файле catalog.py

        <div class="col-lg-4 col-md-6 p-4">
            <div class="card border-primary rounded custom-shadow">

                <img src={% static product.image %} class="card-img-top" alt="...">

______________________________________________________
работа с базами данных 
для просмотра базы данных

DB Browser for SQLite - Standard installer for 64-bit Windows

выполняем миграцию
python manage.py migrate

проверяем в базе, получаем

DB Browser там уже таблица

создаём таблицу в goods/models

from django.db import models

class Categories(models.Model):
    name = models.CharField(max_length=150, unique=True)  #длина и уникальность имени
    slug = models.SlugField(max_length=200, unique=True, blank=True, null=True)

выполняем предварительную миграцию подготовку
python manage.py makemigrations

выполняем миграцию
python manage.py migrate 

заходим в DB Browzer и проверяем

можно внести изменения в models.py и провести команды
python manage.py makemigrations
python manage.py migrate 
создастся ещё файл в папке migrations и применятся все изменения

второй способ удалить файлы db.sqlite и файлы в папке migrations
и заново сделать
python manage.py makemigrations
python manage.py migrate

и получится как будто заново внесли в таблицу данные

всё ок оба способа работают
__________________________________________________

переходим в base.html чтобы забить ссылку на admin панель вносим изменения

<li><a class="dropdown-item  text-white" href="{% url "admin:index" %}">Админ панель</a></li>


создаём админа

python manage.py createsuperuser
Username: root
Email address: 
Password:                               -- пароль не видно когда печатаешь
Password (again):
The password is too similar to the username.
This password is too short. It must contain at least 8 characters.
This password is too common.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.
_______________________________________
заходим в goods/admin вносим изменения

from django.contrib import admin

from goods.models import Categories

admin.site.register(Categories)
_______________________________________

открываем app1/app/settings.py 

LANGUAGE_CODE = 'ru'

делаем админку на русском

заходим goods/models.py и вносим дополнения в класс Meta

    class Meta:
        db_table = 'category'
        verbose_name = 'Категория'
        verbose_name_plural = 'Категории'


и в класс Categories тоже добавляем
class Categories(models.Model):
    name = models.CharField(max_length=150, unique=True, verbose_name='Название')  
    slug = models.SlugField(max_length=200, unique=True, blank=True, null=True, verbose_name='URL')


заходим в goods/apps.py

дополняем его
class GoodsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'goods'
    verbose_name = 'Товары'

заходим в goods/models.py

ииии 

_______________________________________
from unicodedata import category
from django.db import models

class Categories(models.Model):
    name = models.CharField(max_length=150, unique=True, verbose_name='Название')  
    slug = models.SlugField(max_length=200, unique=True, blank=True, null=True, verbose_name='URL')

    class Meta:
        db_table = 'category'
        verbose_name = 'Категорию'
        verbose_name_plural = 'Категории'


class Products(models.Model):
    name = models.CharField(max_length=150, unique=True, verbose_name='Название')  
    slug = models.SlugField(max_length=200, unique=True, blank=True, null=True, verbose_name='URL')
    description = models.TextField(blank=True, null=True, verbose_name='Описание')
    image = models.ImageField(upload_to='goods_image', blank=True, null=True, verbose_name='Изображение')
    price = models.DecimalField(default=0.00, max_digits=7, decimal_places=2, verbose_name='Цена')
    discount = models.DecimalField(default=0.00, max_digits=7, decimal_places=2, verbose_name='Скидка в %')
    quantity = models.PositiveIntegerField(default=0, verbose_name='Количество')
    category = models.ForeignKey(to=Categories, on_delete=models.CASCADE, verbose_name='Категория')

    class Meta:
        db_table = 'product'
        verbose_name = 'Продукт'
        verbose_name_plural = 'Продукты'  
_______________________________________

заходим в goods/admin.py и регистрируем Продукты

from django.contrib import admin

from goods.models import Categories, Products

admin.site.register(Categories)

admin.site.register(Products)

устанавливаем python -m pip install Pillow

делаем миграцию
- python manage.py makemigrations
- python manage.py migrate


запускаем проверяем
________________________________________
открываем goods/models.py
запускаем терминал
вводим команду
- python manage.py shell

запускается интерактивный режим python
вводим

from goods.models import Categories

x = Categories()
x.name = 'Офис'
x.save()
x

и получаем
<Categories: Categories object (1)>

заходим в DB Browzer
проверяем всё ок

x.slug = 'ofice'
x.save()
x

заходим в DB Browzer
проверяем всё ок
quit() - выход
_______________________________________________________________________
pip install ipython - интерактивный питон автокомплит и подсветка синтаксиса(устанавливаем)

после установки закрываем терминал и запускаем терминал чтобы он подхватил изменения 

ipython - можно просто запустить
quit() - выход

запускаем шелл так как надо работать с джанго
- python manage.py shell

Categories.objects.create(name="Кухня", slug="kuhnya")
и получаем
Out[2]: <Categories: Categories object (2)>

Categories.objects.all()                 -- возвращает все обекты в таблице
x = Categories.objects.all()                 
x                                          -- возвращает все обекты в таблице через переменную 
x.filter(id=1)                          -- возвращает по id

___________________________________________

___________________________________________

запускаем сервер и переходим в админку

переходим в Категории

там две созданные нами две категории удаляем их

добавить Категорию
Название - Все товары
URL - пока оставляем пустым
сохраняем

тушим сервер

в goods.models.py добавляем метод __str__ для class Categories и class Products
вложенный метод

Categories
    def __str__(self):
        return self.name

Products
    def __str__(self):
        return f'{self.name} Количество - {self.quantity}'

URL
открываем admin.py
коментируем #admin.site.register(Categories) и 
# admin.site.register(Products)  под вопросом не было отмечено ранее

пишем
@admin.register(Categories)
class CategoriesAdmin(admin.ModelAdmin):
    prepopulated_fields = {'slug': ('name',)}

@admin.register(Products)
class ProductsAdmin(admin.ModelAdmin):
    prepopulated_fields = {'slug': ('name',)}

заходим в админку и при заполнении все товары URL будет заполнятся автоматически
проверяем - удаляем все товары и создаём заново смотрим на URL заполняется автоматически
добавляем все товары в админке которые находятся в base.html


                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Все изделия</a></li>
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Обложки</a></li>
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Домики</a></li>
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Букеты</a></li>
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Бутылки</a></li>
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Кружки</a></li>
                        <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">Ежедневники</a></li>

переходим в файл main/views.py    -- вносим дополнения

from goods.models import Categories

def index(request):

    categories = Categories.objects.all()

    context = {
        'title': 'Home - Главная',
        'content': 'Магазин мебели HOME',
        'categories': categories
    }

заходим в base.html удаляем все ссылки по товарам и оставляем одну
пишем
                    <ul class="dropdown-menu bg-dark" data-bs-theme="dark">
                        
                        {% for category in categories %}
                            <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">{{ category.name }}</a></li>
                        {% endfor %}                      

                    </ul>

_______________________________________________________________________________________________________
_______________________________________________________________________________________________________
заходим в файл views в папке goods и проделываем то же самое

вносим данные в админку

вносим данные по продуктам заполняем в админке и сохраняем кроме image

__________________________

__________________________

создаём папку в корне fixtures в ней папку goods

далее вводим в терминале

python -Xutf8 ./manage.py dumpdata goods.Categories > fixtures/goods/cats.json
python -Xutf8 ./manage.py dumpdata goods.Products > fixtures/goods/prods.json

удаляем db.sqlite3 и goods/migrations/002_alter_.............

заново создаём

- python manage.py makemigrations

- python manage.py migrate

- python manage.py createsuperuser

- python manage.py loaddata fixtures/goods/cats.json

- python manage.py loaddata fixtures/goods/prods.json

проверяем админку
всё ок
_________________________________________________________
ORM - система
устанавливаем расширение на pypi - django debug toolbar

pip install django-debug-toolbar

после установки открываем файл app/settings.py 

Документация, включая инструкции по установке и настройке, 
доступна по адресу https://django-debug-toolbar.readthedocs.io/

заходим https://django-debug-toolbar.readthedocs.io/en/latest/installation.html

проверяем все пункты в settings.py 


заходим в url.py
и вносим дополнения --------------здесь по видосу не правильно смотри ниже код

from django.contrib import admin
from django.urls import include, path

from app.settings import DEBUG

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('main.urls', namespace='main')),
    path('catalog/', include('goods.urls', namespace='catalog'))
]

if DEBUG:
    urlpatterns=[
        path("__debug__/", include("debug_toolbar_urls")),
    ]
--------------------------------------------------------------------код который ниже 
from django.contrib import admin
from django.urls import include, path

from debug_toolbar.toolbar import debug_toolbar_urls

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('main.urls', namespace='main')),
    path('catalog/', include('goods.urls', namespace='catalog'))
] + debug_toolbar_urls()

-------------------------------------------------------------------- остановился пока на этом
from django.contrib import admin
from django.urls import include, path

from app.settings import DEBUG
from debug_toolbar.toolbar import debug_toolbar_urls

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('main.urls', namespace='main')),
    path('catalog/', include('goods.urls', namespace='catalog'))
] 
# + debug_toolbar_urls()

if DEBUG:
    urlpatterns += debug_toolbar_urls()
___________________________________________----------------------------------

далее в settings.py

MIDDLEWARE = [
    # ...
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    # ...
]

и вот это в конце после статик

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

делаем 
- python manage.py migrate

запускаем сервер проверяем
всё ок  помогает в работе отладочном режиме



















