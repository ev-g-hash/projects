------------------------------------------------------------------
работа ORM -- ORM система переводит запросы в SQL запросы
-------------------------------------------------------------------

открываем goods/models.py

запускаем 
- python manage.py 

[debug_toolbar]
    debugsqlshell

запускаем 
- python manage.py debugsqlshell

*****************все запросы суммируются то есть очерёдность не имеет значение что сначала .filter или .order_by

from goods.models import Products
Products.objects.all()                                                  -- выводит все объекты Products
Products.objects.order_by('price')                                      -- сортирует от самой маленькой цены    
Products.objects.order_by('-price')                                     -- сортирует от самой высокой цены 
Products.objects.filter(price__lt=300).order_by('price')                -- сортирует от самой низкой цены цена менее 300  
Products.objects.filter(price__lt=300) &  
Products.objects.filter(price__gt=100)                                  -- диапазон

Products.objects.filter(price__lt=300) &  
Products.objects.filter(price__gt=100).order_by('price')                -- диапазон сортировка по прайсу

Products.objects.filter(price__lt=300).filter(price__gt=100).order_by('price') -- аналогично выше коду

Products.objects.filter(price__lt=50) | Products.objects.filter(description__contains='диван') -- оператор или два условия

Products.objects.filter(category__id=8)                                 -- обращение к объекту который содержит вложенность

Products.objects.filter(category__id=10).order_by('price')

& - оперсанд "and" побитовый
| - оперсанд "or" побитовый
-------------------------------------------------------------------------------------------------------------------------------
присвоение в переменную и обращение к переменной 

goods = Products.objects.filter(category__id=5).order_by('price')
x = goods[0]

далее можем обращаться к полям
x.name
x.slug
x.description               и так далее

for i in goods:
    print(i.name)
    print(i.price)

y = []
for i in goods:
    y.append(i.name)
____________________________________________________________________________________________________________
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

делаю по этому файлу command_3_3.txt - редактирование от command_3.txt 

___________________________
заходим в goods/views.py убираем словарь goods оставляем только goods

from django.shortcuts import render

def catalog(request):
   
    context = {
        "title": "Home - каталог",
        "goods": 
    }
    return render(request, "goods/catalog.html", context)


def product(request):
    return render(request, "goods/product.html")
____________________________________________________
импортируем Products
далее записываем переменную goods и смотри окончательный код:

from django.shortcuts import render
from goods.models import Products

def catalog(request):

    goods = Products.objects.all()

    context = {
        "title": "Home - каталог",
        "goods": goods,
    }
    return render(request, "goods/catalog.html", context)

def product(request):
    return render(request, "goods/product.html")

заходим на сайт проверяем

закоментить если выдаёт ошибку в catalog.html

                        {% comment %} <a href="#" class="btn add-to-cart">
                            <img class="mx-1" src={% static "/deps/icons/cart-plus.svg" %} alt="Catalog Icon"
                                width="32" height="32">
                        </a> {% endcomment %}

так как картинки пока не активны

или добавить три точки

                        <a href="#" class="btn add-to-cart">
                            <img class="mx-1" src={% static ".../deps/icons/cart-plus.svg" %} alt="Catalog Icon"
                                width="32" height="32">
                        </a> 

работа с изображениями

в базе данных хранятся не сами изображения а маршрут где они находятся

создаём в корне папку media
открываем app/settings.py

MEDIA_URL = 'media/' - дописываем 'media/' - это префикс

MEDIA_ROOT = BASE_DIR / 'media' - прописываем корень проекта и папка media

обслуживание медиа файлов

открываем app/urls.py

окончательный код
__________________________________________________________

from django.contrib import admin
from django.urls import include, path

from app import settings
from debug_toolbar.toolbar import debug_toolbar_urls

from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('main.urls', namespace='main')),
    path('catalog/', include('goods.urls', namespace='catalog'))
] 
# + debug_toolbar_urls()

if settings.DEBUG:
    urlpatterns += debug_toolbar_urls()

urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
_______________________________________________________________________________________________

заходим в админку добавляем в продуктах путь URL картинок - это папка где хранятся картинки

далее заходим в goods/templates/goods/catalog.html           

        <!-- Карта товара -->
        <div class="col-lg-4 col-md-6 p-4">
            <div class="card border-primary rounded custom-shadow">
            ***************
                <img src={% static product.image %} class="card-img-top" alt="...">
            **************
удаляем из шаблона тег статик и прописыаем плейсхолдер и условие на отсутствие картинки if

        <!-- Карта товара -->
        <div class="col-lg-4 col-md-6 p-4">
            <div class="card border-primary rounded custom-shadow">
            ***************
                {% if product.image %}
                    <img src={{ product.image.url }} class="card-img-top" alt="...">
                {% endif %}   
            ***************
и всё получается!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

       добавляем else

                {% else %}
                    <img src="{% static "deps/images/Not found image.png" %}" class="card-img-top" alt="...">
                {% endif %}

окончательный код

                {% if product.image %}
                    <img src="{{ product.image.url }}" class="card-img-top" alt="{{ product.name }}">
                {% else %}
                    <img src="{% static "deps/images/Not found image.png" %}" class="card-img-top" alt="...">
                {% endif %}


перходим в админ панель и загружаем все изображения
--------------------------------------------------
прописыаем id и скидку

в приложении goods открываем файл models.py

определяем метод для id в class Products

    def display_id(self):
        return f"{self.id:05}"

а в catalog.html вместо <p class="product_id">id: 02265</p>

прописываем плейсхолдер
<p class="product_id">id: {{ product.display_id }}</p>

____________________________________________________
скидка  в файле models.py в class Products определяем метод 

    def sell_price(self):
        if self.discount:
            return round(self.price - self.price*self.discount/100, 2)
        return self.price

переходим в catalog.html

вместо-----------------------
                        <p><s>100</s> $</p>
                        <p><strong>90.00 $</strong></p>
                        <span class="badge bg-warning text-dark">Скидка 10.00 %</span>
                        <p><strong>{{ product.price }} руб.</strong></p>
пишем--------------------
                        {% if product.discount %}
                            <p><s>{{ product.price }}</s> $</p>
                            <p><strong>{{ product.sell_price }} $</strong></p>
                            <span class="badge bg-warning text-dark">Скидка {{ product.discount }} %</span>
                        {% else %}
                            <p><strong>{{ product.price }} $</strong></p>
                        {% endif %}

заходим проверяем все работает

____________________________________________________________________________________________________________
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

создаём шаблонные теги для каждого приложения будут отдельные 
заходим в goods создаём templatetags без вариантов название
создаём __init__.py
создаём goodg_tags.py

заходим во views.py который в main и удаляем Categories

def index(request):

    context = {
        'title': 'Home - Главная',
        'content': 'Магазин мебели HOME',        
    }
    return render(request, 'main/index.html', context)

сохраняем, закрываем

открываем goods_tags.py
пишем код
____________________
from atexit import register
from django import template

from goods.models import Categories


register = template.Library()

@register.simple_tag()
def tag_categories():
    return Categories.object.all()
__________________________________

открываем base.html

{% load static %}
{% load goods_tags %}    -- прописываем вверху

и изменяем код добавляем 

                    <ul class="dropdown-menu bg-dark" data-bs-theme="dark">
                        
                        {% tag_categories as categories  %}
                        {% for category in categories %}
                            <li><a class="dropdown-item text-white" href="{% url "catalog:index" %}">{{ category.name }}</a></li>
                        {% endfor %}                      

                    </ul>